var w = 720,
    h = 720,
    format = d3.format(',d'),
    fill = d3.scale.category20c(),
    lscale = d3.scale.sqrt().range([1, 1.7]);

var spiral = d3.layout.pack()
    .sort(null)
    .size([w, h])
    .padding(1.5);

var vis = d3.select('#vis').append('svg')
    .attr('width', w)
    .attr('height', h)
    .attr('class', 'spiral')
    .append('svg:g')
      .call(d3.behavior.zoom().on('zoom', rescale));

d3.csv('/csv/platforms.csv', function(csv) {
  var node = vis.selectAll('g.node')
      .data(spiral.nodes(nodes(csv))
      .filter(function(d) { return !d.children; }))
    .enter().append('g')
      .attr('class', 'node')
      .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; });

  node.append('title')
      .text(function(d) { return d.name + ': ' + format(d.value); });

  node.append('circle')
      .attr('r', function(d) { return d.r; })
      .style('fill', function(d) { return fill(d.value); })
      .call(events);

  node.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', '.3em')
      .attr('style', function(d) { return 'font-size:' + lscale(d.value); })
      .text(function(d) { return d.name; })
      .call(events);

});

function nodes(data) {
  return {children: data}
}

function nodecolor(elt, color) {
    if ('text' == elt.nodeName)
        d3.select(elt.previousSibling).style('fill', color)
    else
        d3.select(elt).style('fill', color)
}

function events(d) {
  d.on('click', function(d) {
    console.log(d)
  });
  d.on('mouseover', function(d) {
    nodecolor(this, '#ddd')
  });
  d.on('mouseout', function(d) {
    nodecolor(this, fill(d.value))
  });
}

function rescale() {
  vis.attr('transform', 'translate(' + d3.event.translate + ')'
      + ' scale(' + d3.event.scale + ')')
}
