(function() {

var w = containerwidth('#vis'),
  h = w,
  format = d3.format(',d'),
  fill = d3.scale.category20c(),
  lscale = d3.scale.sqrt().range([1, 1.6]),
  platforms,
  maxval;

var spiral = d3.layout.pack()
  .size([w, h])
  .padding(6.6);

var vis = d3.select('#vis').append('svg')
  .attr('width', w)
  .attr('height', h)
  .attr('class', 'spiral')
  .append('svg:g')
    .call(d3.behavior.zoom().on('zoom', rescale));

d3.json('/json/exploit-db-platforms.json', function(error, json) {
  // update summary with counts
  d3.select('#platformcount').text(json.length);
  d3.select('#exploitcount').text(format(d3.sum(json, function(d) {return d.value})));

  platforms = spiral.nodes(nodes(json)).filter(function(d) { return !d.children; });
  var node = vis.selectAll('g.node')
    .data(platforms)
    .enter().append('g')
      .attr('class', 'node')
      .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; });

  node.append('title')
    .text(function(d) { return d.name + ': ' + format(d.value); });

  node.append('circle')
    .attr('r', function(d) { return d.r; })
    .style('fill', function(d) { return fill(d.value); })
    .call(events);

  node.append('text')
    .attr('text-anchor', 'middle')
    .attr('dy', '.3em')
    .attr('style', function(d) { return 'font-size:' + lscale(d.value) + 'px' })
        .text(function(d) { return d.name; })
    .call(events);

  bar('#platforms', platforms.slice(-15).reverse());

  // check location hash
  hashchange();
});

// show platform summary
var obtn = d3.select('#overview');
obtn.on('click', function() {
  location.replace('#', '');
  obtn.style('display', 'none');
  d3.selectAll('.nodeinfo').style('display', 'none');
  d3.select('#expplatforms').style('display', 'block');
});

// call hashchange when the url changed
d3.select(window).on('hashchange', hashchange);

function nodes(data) {
  return {children: data}
}

function hashchange() {
  var name = decodeURIComponent(location.hash.substring(1)).trim();
  if (!name) return;
  d3.select('#overview').style('display', 'block');
  for (i in platforms) {
    p = platforms[i];
    if (p.name == name) {
      shownode(p);
      break;
    }
  }
}

// render bar chart
function bar(selector, data) {
  maxval = d3.max(data, function(d) { return d.value });
  var loff = 130,
    barw = containerwidth(selector) - loff,
    barh = 20 * data.length,
    xoff = 10,
    yoff = 15,
    y = 20,
    wscale = d3.scale.linear().domain([0, maxval]).range(['0px', barw + 'px']),
    hscale = d3.scale.ordinal().domain(data).rangeBands([0, barh]),
    xticks = wscale.ticks(4);

  var bar = d3.select(selector);
  bar.selectAll('svg').remove();
  var svg = bar.append('svg')
    .attr('class', 'bar')
    .attr('width', barw + 130)
    .attr('height', barh + yoff)
    // make space for legend
    .append('g')
      .attr('transform', 'translate(' + xoff + ',' + xoff + ')');

  // add lablels
  svg.selectAll('text')
    .data(data)
    .enter().append('text')
      .attr('x', barw + xoff)
      .attr('y', function(d, i) {return i * y + yoff})
      .text(function(d) {return d.name + ': ' + format(d.value)});

  // add vertical lines
  svg.selectAll('line')
    .data(xticks)
    .enter().append('line')
      .attr('x1', wscale)
      .attr('x2', wscale)
      .attr('y1', 0)
      .attr('y2', barh)
      .style('stroke', '#ccc')
      .style('stroke-dasharray', '5,2');

  // add actual bars
  svg.selectAll('rect')
    .data(data)
    .enter().append('rect')
      .attr('y', function(d, i) {return i * y})
      .attr('width', function(d) {return wscale(d.value)})
      .attr('height', y - 1);

  // add legend to vertical lines
  svg.selectAll('.rule')
    .data(xticks)
    .enter().append('text')
      .attr('class', 'rule')
      .attr('x', wscale)
      .attr('y', 0)
      .attr('dy', -2)
      .attr('text-anchor', 'middle')
      .text(String);
}

function nodecolor(elt, color) {
  if ('text' == elt.nodeName)
    d3.select(elt.previousSibling).style('fill', color)
  else
    d3.select(elt).style('fill', color)
}

function shownode(d) {
  location.replace('#' + encodeURIComponent(d.name));
  d3.select('#expplatforms').style('display', 'none');
  d3.selectAll('.nodeinfo').style('display', 'block');
  d3.select('#platform').text(d.name + ' ' + format(d.value) + ' exploits');
  bar('#exptypes', d.types);
  bar('#expcode', d.code);
}

function events(d) {
  d.on('click', function(d) {shownode(d)});
  d.on('mouseover', function(d) {nodecolor(this, '#ddd')});
  d.on('mouseout', function(d) {nodecolor(this, fill(d.value))});
}

function rescale() {
  vis.attr('transform', 'translate(' + d3.event.translate + ')'
    + ' scale(' + d3.event.scale + ')')
}

})();
